name: Auto Sync with Main Branch

on:
  workflow_dispatch:

permissions:
  contents: write

jobs:
  auto-sync:
    name: Auto Sync with Main Branch
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Get active Epic branches
        id: get_active_epic_branches
        run: |
          git fetch --all
          current_date=$(date +%s)
          one_week_ago=$(date -d '1 week ago' +%s)

          branches=()

          echo "Script Log: Listing all remote branches that start with 'feature/main/' and checking their last commit date..."
          EPIC_BRANCHES=$(git for-each-ref --sort=-committerdate refs/remotes/ --format='%(refname:short)' | grep '^origin/feature/main/')
          echo "Script log: Branches updated within the last week:"
          for branch in $EPIC_BRANCHES; do
            commit_date=$(git log -1 --format=%ct $branch)
            if [ $commit_date -ge $one_week_ago ]; then    
              branches+=("$branch")
              echo "$branch"
            fi
          done

          echo "active_branches=${branches[@]}" >> $GITHUB_OUTPUT
        shell: bash

      - name: Get latest changes from main
        run: |
          git checkout main
          git pull origin main
          echo "Script log: Pulled latest changes from main"

      - name: Create PRs for active epic branches
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          ACTIVE_EPIC_BRANCH=(${{ steps.get_active_epic_branches.outputs.active_branches }})
          for branch in "${ACTIVE_EPIC_BRANCH[@]}"; do
            echo "SCRIPT LOG: PROCESSING EPIC BRANCH: $branch"
            ACTIVE_EPIC_BRANCH=${branch#origin/}
            git checkout $ACTIVE_EPIC_BRANCH
            git pull origin $ACTIVE_EPIC_BRANCH
            echo "Script log: Pulled latest changes from branch: $ACTIVE_EPIC_BRANCH"

            echo "SCRIPT LOG: CHECKING FOR CHANGES"
            git diff --exit-code main $ACTIVE_EPIC_BRANCH
            echo "SCRIPT LOG: DIFF EXIT STATUS: $?"
            DIFF_EXIT_STATUS=$?
            echo "SCRIPT LOG: DIFF EXIT STATUS: $DIFF_EXIT_STATUS"

            if [ $DIFF_EXIT_STATUS -eq 0 ]; then
              echo "SCRIPT LOG: NO CHANGES DETECTED, SKIPPING MERGE"
            elif [ $DIFF_EXIT_STATUS -eq 1 ]; then
              echo "SCRIPT LOG: CHANGES DETECTED"
              TEMP_EPIC_BRANCH=$(echo "$ACTIVE_EPIC_BRANCH" | sed 's|^feature/main/|feature/|' | sed 's|$|-sync-with-main|')
              git checkout -b $TEMP_EPIC_BRANCH
              echo "Script log: Checked out new branch: $TEMP_EPIC_BRANCH"
              git push --set-upstream origin $TEMP_EPIC_BRANCH
              echo "SCRIPT LOG: CREATED TEMP BRANCH: $TEMP_EPIC_BRANCH"

              if git merge main; then
                echo "SCRIPT LOG: MERGE SUCCESSFUL, PUSHING CHANGES"
                git push origin $TEMP_EPIC_BRANCH
                echo "Script log: Pushed changes to branch: $TEMP_EPIC_BRANCH"
              else
                echo "SCRIPT LOG: MERGE CONFLICT DETECTED, ABORTING MERGE"
                git merge --abort
                echo "Script log: Creating PR to resolve conflicts for branch: $TEMP_EPIC_BRANCH"
              fi
            else
              echo "SCRIPT LOG: ERROR DETECTED, EXIT STATUS: $DIFF_EXIT_STATUS"
            fi  
          done
